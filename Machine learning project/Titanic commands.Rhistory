train.dummy<-predict(dummy.vars, train[,-1])
view(train.dummy)
view(train.dummy)
library(caret)
library(doSNOW)
view(train.dummy)
train.dumm
train.dummy
view(train.dummy)
View(train.dummy)
View(train.dummy)
View(train)
pre.process<-preProcess(train.dummy, method="bagImpute")
pre.process<-preProcess(train.dummy, method="bagImpute")
train.dummy<-predict(dummy.vars, train[,-1])
pre.process<-preProcess(train.dummy, method="bagImpute")
?preProcess
pre.process<-preProcess(train.dummy, method="bagimpute")
pre.process<-preProcess(train.dummy, method="BoxCox")
pre.process<-preProcess(train.dummy, method="bagImpute")
pre.process<-preProcess(train.dummy, method="ica")
pre.process<-preProcess(train.dummy, method="YeoJohnson")
pre.process<-preProcess(train.dummy, method="BoxCon")
pre.process<-preProcess(train.dummy, method="BoxCox")
imputed.data<-predict(pre.process, train.dummy)
view(imputed.data)
imputed.data
train$Age<-imputed.Age[,6]
train$Age<-imputed.data[,6]
train
view(train)
library(caret)
view(train)
library(e1071)
view(train)
view(doSNOW)
library(doSNOW)
view(doSNOW)
view(train)
train
view(train)
View(train)
View(imputed.data)
set.see(54321)
set.seed(54321)
indexes<-createDataPartition(train$Survived, times=1, p=0.7, list=FALSE)
titanic.train<-train[indexes,]
titanic.test<-train[-indexes,]
prop.table(table(train$Survived))
train$Survived
prop.table(table(train$Survived))
prop.table
prop.table(table(titanic.train$Surbived))
prop.table(table(titanic.train$Surbived))
prop.table(table(titanic.test$Surbived))
View(titanic.train)
prop.table(table(titanic.train$Survived))
prop.table(table(titanic.test$Survived))
?trainControl
train.control<-trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
tune.grid
tune.grid<-expand.grid(eta=c(0.05, 0.075, 0.01), nrounds=c(50, 75, 100), max_depth=6:8, min_child_weight=c(2.0,2.25,2.5))
tune.grid<-expand.grid(eta=c(0.05, 0.075, 0.01), nrounds=c(50, 75, 100), max_depth=6:8, min_child_weight=c(2.0,2.25,2.5),colsample.bytree=c(0.3,0.4,0.5), gamma=0, subsample=1)
View(tune.grid)
cl<-makeCluster(10, type="SOCk")
cl<-makeCluster(10, type="SOCK")
registerDoSNOW(cl)
caret.cv<-train(Survived~.,data=titanic.train,method="xgbTree", tuneGrid=tune.grid, trControl=train.control)
caret.cv<-train(Survived ~ .,data=titanic.train,method="xgbTree", tuneGrid=tune.grid, trControl=train.control)
caret.cv<-train(Survived ~ .,data=titanic.train,method="xgbTree", tuneGrid=tune.grid, trControl=train.control)
?train
caret.cv<-train(Survived ~ .,data=titanic.train,method="rpart1SE", tuneGrid=tune.grid, trControl=train.control)
View(Survived)
caret.cv<-train(train$Survived ~ .,data=titanic.train,method="rpart1SE", tuneGrid=tune.grid, trControl=train.control)
caret.cv<-train(Survived ~ ., data=titanic.train,method="chaid", tuneGrid=tune.grid, trControl=train.control)
stopCluster(cl)
caret.cv
caret.cv<-train(Survived)
caret.cv<-train(Survived~.)
caret.cv<-train(Survived~.,)
caret.cv<-train(Survived~., data(titanic.train), method="xgbTree", tuneGrid=tune.grid, trControl=train.control)
caret.cv<-train(Survived~., data=titanic.train, method="xgbTree", tuneGrid=tune.grid, trControl=train.control)
View(Survived)
?Survived
?lapply(list, function)
?lapply
read.table("//win3/staff/homes/christod/Desktop/rain.xlsx")
read.table("//win3/staff/homes/christod/Desktop/train.xlsx")
read.table("//win3/staff/homes/christod/Desktop/train.xlsx", header="FALSE")
read.table("//win3/staff/homes/christod/Desktop/train.xlsx", header="TRUE")
read.xlsxc("//win3/staff/homes/christod/Desktop/train.xlsx", header="TRUE")
read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx", header="TRUE")
read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx")
fread("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data")
?fread
library(data.table)
fread("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data")
fread("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data")->iris
iris
names(iris)
names(iris)->c("sepal.Length","sepal.Width","petal.Length","petal.Width", "Class")
?names
names(iris)<-c("sepal.Length","sepal.Width","petal.Length","petal.Width", "Class")
names(iris)
iris
head(iris)
View(iris)
View(iris)
plot(iris(c("petal.Length", "petal.Width")))
plot(iris(c("petal.Length", "petal.Width")))
library(ggplot2)
plot(iris(c("petal.Length", "petal.Width")))
plot(iris(c("petal.Length", "petal.Width")))
plot(iris(("petal.Length", "petal.Width")))
plot(iris(("petal.Length", "petal.Width")))
plot(iris(("petal.Length", "petal.Width"))
plot(iris(("petal.Length", "petal.Width"))
plot(iris(("petal.Length", "petal.Width"))
plot(iris("petal.Length", "petal.Width")
)
plot(iris(c("petal.Length", "petal.Width")))
plot(iris)
plot(iris(c('sepal.Length','sepal.Width')))
plot((c('sepal.Length','sepal.Width')))
plot(c('sepal.Length','sepal.Width'))
plot(iris)
is.data.frame(iris)
iris.features=iris
iris.features
iris.features$Class<-NULL
View(iris.features)
results<-kmeans(iris.features,3)
results
resu;ts$size
results$size
plot(iris(c["petal.Length","petal.Width"]),col=results$cluster)
plot(iris[c("petal.Length","petal.Width")],col=results$cluster)
plot(iris[c("petal.Length","petal.Width")],col=results$cluster)
dev.off()
plot(iris[c("petal.Length","petal.Width")],col=results$cluster)
sessionInfo
sessionInfo()
RStudio.Version()
plot(iris)
plot(iris[c("petal.Length","petal.Width")],col=results$cluster)
plot(iris[c("petal.Length","petal.Width")],col=results$cluster)
plot(iris[c("petal.Length","petal.Width")])
plot(iris[c("petal.Length","petal.Width")],col=results$cluster)
names(iris)
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
library(ggplot2)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
cor(iris$Petal.Length, iris$Petal.Width)
cor(iris$petal.Length, iris$petal.Width)
names(iris)
print(x[1])
levels(iris$Species)
str(iris)
levels(iris$Class)
table(iris$ Class)
round(prop.table(table(iris$Class)) * 100, digits = 1)
summary(iris)
summary(iris[c("petal.Width","sepal.Width")])
library(class)
library("xlsx")
install.packages("xlsx")
library(xlsx)
library(xlsx)
read.xlsx("C:/win3/staff/homes/christod/Desktop/train.xlsx")
read.xlsx("C:/win3/staff/homes/christod/Desktop/train.xlsx", heade=TRUE)
read.xlsx("C:/win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
read.table("C:/win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
read.table("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
read.table("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
read.table("c:/win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
read.table("C:/win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)->train
read.table("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)->train
read.table("/win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)->train
install.packages("devtools")
librar("devtools")
library()
library("devtools")
read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
read.table("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
read.xls("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
library("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
open(openxlsx)
install.packages("openxlsx")
library("xlsx")
train<-read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx")
library(openxlsx)
train<-read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
train<-read.xlsx("/win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
train<-read.xlsx("c:/win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
train<-read.xlsx("c:/win3/staff/homes/christod/Desktop/train.xlsx")
train<-read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx")
train
head(train)
train
train$PassengerId
train$PassengerId
train<-read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx", na.strings = c(""))
train
sapply(train, header=T, na.strings=c("")
)
sapply(train, header=T, na.strings=c(""))
sapply(train, header=T, function(x), sum(is.na(x)))
sapply(train, header=T, function(x) sum(is.na(x)))
sapply(train, function(x) sum(is.na(x)))
train$Cabin
sapply(train, function(x) sum(is.na(x)))
sapply(train, function(x) sum(is.na(x)))
sapply(train, function(x) length(unique(x)))
library(Amelia)
missmap
?missmap
install.packages("Amelia")
library(Amelia)
missmap(train, main = "Missing values vs observer")
data<-subset(train, select=c(2,3,5,6,7,8,10,12))
data
head(data)
data$Age
data$Age[is.na(data$Age)]<-mean(data$Age, na.rm=T)
data
data$Age
head(data$Age)
is.factor (data$Sex)
data
is.factor(data$Embarked)
is.data.frame(data)
is.character(data$Sex)
is.factor(data$Survived)
contrasts(data)
contrasts(data$Sex)
for (i in 1:ncol(data)){}
for (i in 1:ncol(data)){data[,i]<-as.factor(data[,i])}
data
is.factor(data$Sex)
contrasts(data$Sex)
data
head(data)
data<-data[!is.na(data$Embarked), ]
data
head(data)
rownames(data)<-NULL
data
data
data$Survived
891/3
data
data[1,]
891/3
datasubset1<-data[1:297,]
297*2
594+297
datasubset2<-data[298:594,]
datasubset3<-data[595:891,]
datasubset2
head(datasubset2)
datasubset3
tail(datasubset3)
sum(data)
sum(datasubset1)
sum(datasubset1$Survived)
sum(datasubset1)
sum(data)
datasubset1
traindatasubset1<-datasubset1[1:208, ]
traindatasubset
traindatasubset1
testdatasubset1<-datasybset1[209:297, ]
testdatasubset1<-datasubset1[209:297, ]
testdatasubset1
head(testdatasubset1)
tail(traindatasubset1)
traindatasubset2<-datasubset2[298:594, ]
298+208
traindatasubset2<-datasubset2[298:506, ]
traindatasubset2<-datasubset2[298:505, ]
testdatasubset2<-datasubset2[506:594, ]
594+208
traindatasubset2<-datasubset2[594:802, ]
traindatasubset2<-datasubset2[298:505, ]
traindatasubset3<-datasubset3[594:802, ]
traindatasubset3<-datasubset3[594:801, ]
testdatasubset3<-datasubset3[801:889, ]
testdatasubset3
datasubset3
traindatasubset3<-datasubset3[595:801, ]
traindatasubset3
datasubset2
traindatasubset1
traindatasubset2
traindatasubset2<-datasubset2[1:208, ]
traindatasubset2
testdatasubset2<-datasubset2[209:297, ]
testdatasubset2
traindatasubset3<-datasubset3[1:208, ]
testdatasubset3<-datasubset3[209:297, ]
testdatasubset3
testdatasubset3<-datasubset3[209:295, ]
testdatasubset3
tail(traindatasubset2)
tail(testdatasubset2)
head(testdatasubset2)
tail(traindatasubset3)
head(traindatasubset3)
head(traidatasubset3)
head(testdatasubset3)
head(testdatasubset3)
tail(testdatasubset3)
testdatasubset3
traindatasubset3
tail(traindatasubset3)
head(traindatasubset3)
traindatasubset3
testdatasubset3
traindatasubset1$Survived
modeldatasubset1<-glm(Survived ~., family=binomail(link='logit'), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~., family=binomial(link='logit'), data=traindatasubset1)
is.factor(traindatasubset1$Survived)
modeldatasubset1<-glm(Survived ~ ., family=binomial(link='logit'), data=traindatasubset1)
modeldatasubset1
modeldatasubset1<-glm(Survived ~ ., family=binomial(link="logit"), data=traindatasubset1)
modeldatasubset1
summary(modeldatasubset1)
traindatasubset1
sum(traindatasubset1)
modeldatasubset1<-glm(Survived ~ ., family=quasibinomial(link = "logit"), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~ ., family=poisson(link=), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~ ., family=poisson(link="poisson"), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~ ., family=poisson(link="log"), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~ ., family=Gamma(link="inverse"), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~ ., family=quasi(link="identity"), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~., family=binomial(link="logit"), data=traindatasubset1)
install.packages("glmnet")
library(glmnet)
load(glm())
load(glm)
require(glmnet)
modeldatasubset1<-glm(Survived ~., family=binomial(link="logit"), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~., family=binomial(link='logit'), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~., family=binomial(link='logit'), data=traindatasubset1, control = list(maxit=50))
modeldatasubset1<-glm(Survived ~., family=quasibinomial(link='logit'), data=traindatasubset1, control = list(maxit=50))
modeldatasubset2<-glm(Survived ~., family=quasibinomial(link='logit'), data=traindatasubset22, control = list(maxit=50))
modeldatasubset2<-glm(Survived ~., family=quasibinomial(link='logit'), data=traindatasubset2, control = list(maxit=50))
modeldatasubset3<-glm(Survived ~., family=quasibinomial(link='logit'), data=traindatasubset3, control = list(maxit=50))
summary(modeldatasubset1)
summary(modeldatasubset2)
summary(modeldatasubset1)
summary(modeldatasubset2)
summary(modeldatasubset3)
traindatasubset1
traindatasubset2
traindatasubset3
modeldatasubset1<-glm(Survived ~., family=binomial(link='logit'), data=traindatasubset1, control = list(maxit=50))
summary(modeldatasubset1)
modeldatasubset1<-glm(Survived ~., family=quasibinomial(link='logit'), data=traindatasubset1, control = list(maxit=50))
summary(modeldatasubset1)
anova(modeldatasubset1, test="Chisq")
anova(modeldatasubset2, test="Chisq")
anova(modeldatasubset3, test="Chisq")
library(pscl)
install.packages("pscl")
library(pscl)
pR2(modeldatasubset1)
pR2(modeldatasubset1)
pR2(modeldatasubset2)
pR2(modeldatasubset3)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(2,3,4,5,6,7,8)), type='response')
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(2,3,4,5,6,7,8)), type='response')
fitted.results1<-idelse(fitted.results1>0.5,1.0)
fitted.results1<-ifelse(fitted.results1>0.5,1.0)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(2,3,4,5,6,7,8)), type='response')
str(modeldatasubset1)
for (i in 1:ncol(datasubset1)){
if(is.character(data[,i])){
data[,i]=factor(data[,i])
}
}
View(datasubset1)
View(modeldatasubset1)
modeldatasubset1<-glm(Survived ~., family=quasibinomial(link='logit'), data=traindatasubset1, control = list(maxit=50))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)), type='response')
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)), type='response', se.fit = FALSE)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)), se.fit = FALSE)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)), se.fit = FALSE)
str(datasubset1)
datasubset1$Age
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)), se.fit = FALSE)
fitted.results1
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,5,6,7,8)), se.fit = FALSE)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,5,6,7,8)))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1), type="response")
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1), type='response')
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1))
fitted.results1<-predict(modeldatasubset1, newdata=testdatasubset1, type="response")
View(modeldatasubset1)
View(traindatasubset1)
View(testdatasubset1)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,5,6,7,8)), se.fit = FALSE)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)), se.fit = FALSE)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)),type=c("response", "terms") se.fit = FALSE)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1, select=c(1,2,3,4,5,6,7,8)),type=c("response", "terms"))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("response", "terms"))
)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("response", "terms")), terms = NULL)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("response", "terms")), terms = NULL, na.action = na.pass())
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("response", "terms")), terms = NULL, na.action = na.pass
)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("response", "terms")), terms = NULL, na.action = NA)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("response", "terms")), terms = NULL, na.action = "NA")
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("response", "terms")), terms = NULL, na.action = NA)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("terms")), terms = NULL, na.action = NA)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("terms")), terms = NULL)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,type=c("terms")))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1,)
)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1)
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1))
fitted.results1<-predict(modeldatasubset1, newdata=subset(testdatasubset1))
testdatasubset1
factors(testdatasubset1)
factor(testdatasubset1)
traindatasubset1
head(traindatasubset1)
View(testdatasubset1)
View(testdatasubset1)
View(traindatasubset1)
modeldatasubset1
read.xls("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
library("devtools")
read.xls("//win3/staff/homes/christod/Desktop/train.xlsx", header=TRUE)
train<-read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx")
library(openxlsx)
train<-read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx")
train
head(train)
train<-read.xlsx("//win3/staff/homes/christod/Desktop/train.xlsx", na.strings = c(""))
train
sapply(train, header=T, na.strings=c("")
)
sapply(train, header=T, na.strings=c(""))
sapply(train, header=T, function(x), sum(is.na(x)))
sapply(train, header=T, na.strings=c(""))
sapply(train, header=T, function(x) sum(is.na(x)))
sapply(train, function(x) sum(is.na(x)))
train$Cabin
sapply(train, function(x) sum(is.na(x)))
sapply(train, function(x) length(unique(x)))
library(Amelia)
missmap
install.packages("Amelia")
install.packages("Amelia")
library(Amelia)
missmap(train, main = "Missing values vs observer")
data<-subset(train, select=c(2,3,5,6,7,8,10,12))
data
head(data)
data$Age
data$Age[is.na(data$Age)]<-mean(data$Age, na.rm=T)
is.factor (data$Sex)
is.factor(data$Embarked)
is.data.frame(data)
is.factor(data$Survived)
is.character(data$Sex)
for (i in 1:ncol(data)){data[,i]<-as.factor(data[,i])}
is.factor(data$Sex)
contrasts(data$Sex)
head(data)
data<-data[!is.na(data$Embarked), ]
rownames(data)<-NULL
datasubset1<-data[1:297,]
datasubset2<-data[298:594,]
datasubset3<-data[595:891,]
sum(data)
traindatasubset1<-datasubset1[1:208, ]
testdatasubset1<-datasubset1[209:297, ]
traindatasubset2<-datasubset2[298:594, ]
traindatasubset2<-datasubset2[298:505, ]
testdatasubset2<-datasubset2[506:594, ]
traindatasubset3<-datasubset3[594:801, ]
traindatasubset3<-datasubset3[595:801, ]
testdatasubset3<-datasubset3[801:889, ]
modeldatasubset1<-glm(Survived ~ ., family=binomial(link="logit"), data=traindatasubset1)
modeldatasubset1<-glm(Survived ~ ., family=quasi(link="identity"), data=traindatasubset1)
install.packages("glmnet")
library(glmnet)
modeldatasubset3<-glm(Survived ~., family=quasibinomial(link='logit'), data=traindatasubset3, control = list(maxit=50))
savehistory("//win3/staff/homes/christod/Desktop/Titanic commands.Rhistory")
